module.exports = {
  // Экспортируем объект настроек ESLint, чтобы другие файлы могли его использовать.
  parser: "@typescript-eslint/parser", // Указываем парсер, который будет анализировать код TypeScript.
  parserOptions: {
    // Опции для парсера, уточняющие, как обрабатывать код.
    project: "./tsconfig.json", // Используем файл `tsconfig.json`, чтобы ESLint знал о проекте TypeScript.
  },
  extends: ["airbnb-typescript/base"], // Подключаем набор правил от Airbnb для TypeScript.
  plugins: ["import"], // Подключаем плагин `import`, который помогает следить за импортами и их корректностью.
  rules: {
    // Определяем кастомные правила ESLint, которые изменяют или дополняют стандартные.
    "import/extensions": [
      // Определяем правило для расширений файлов при импорте.
      "error", // Ошибка, если правило нарушено.
      "ignorePackages", // Игнорируем пакеты, им не нужны расширения.
      {
        ts: "never", // Не указываем `.ts` в импортах.
        js: "never", // Не указываем `.js` в импортах.
      },
    ],
    "import/no-unresolved": "error", // Ошибка, если импортируемый файл не найден.
    "import/prefer-default-export": "off", // Отключаем правило, требующее экспортировать по умолчанию.
    "class-methods-use-this": "error", // Ошибка, если метод класса не использует `this`, что может указывать на ненужный метод.
    "no-console": "off", // Отключаем правило, запрещающее использование `console.log` и других методов `console`.
  },
  settings: {
    // Дополнительные настройки для работы с модулями.
    "import/resolver": {
      // Настройки для резолвера импортов.
      typescript: {}, // Указываем, что импортируемые пути должны разрешаться с учетом TypeScript.
    },
  },
};
